#!/usr/bin/env python3

import argparse
import requests
import json
import sys

# Create a custom session that does not verify SSL certificates
session = requests.Session()
session.verify = False  # Disable SSL verification (INSECURE!)

def call_chatgpt(api_key, prompt, model="gpt-3.5-turbo", temperature=0.7):
    """
    Sends a chat completion request to the OpenAI API using the given prompt
    and returns the generated response.

    :param api_key: Your OpenAI API key (string)
    :param prompt: The message/prompt to send to ChatGPT (string)
    :param model: The ChatGPT model to use (string)
    :param temperature: The temperature setting for the generation (float)
    :return: The response string from ChatGPT
    :raises Exception: For any unsuccessful requests
    """
    url = "https://api.openai.com/v1/chat/completions"
    
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {api_key}"
    }

    payload = {
        "model": model,
        "messages": [
            {"role": "user", "content": prompt}
        ],
        "max_tokens": 100,
        "temperature": temperature
    }

    try:
        response = session.post(url, headers=headers, json=payload)
        response.raise_for_status()  # Raise an exception if the request failed

        response_json = response.json()
        return response_json["choices"][0]["message"]["content"].strip()
    except requests.exceptions.RequestException as e:
        raise Exception(f"Request to ChatGPT failed: {e}")

def main():
    parser = argparse.ArgumentParser(
        description="A simple CLI tool to query ChatGPT with a custom session (SSL disabled)."
    )
    parser.add_argument("prompt", type=str, help="The prompt to send to ChatGPT.")
    parser.add_argument(
        "--api-key", 
        type=str, 
        required=True, 
        help="Your OpenAI API key."
    )
    parser.add_argument(
        "--model", 
        type=str, 
        default="gpt-3.5-turbo", 
        help="Which GPT model to use (default: gpt-3.5-turbo)."
    )
    parser.add_argument(
        "--temperature", 
        type=float, 
        default=0.7, 
        help="Controls the randomness of the model's output (default: 0.7)."
    )

    args = parser.parse_args()

    try:
        response_text = call_chatgpt(
            api_key=args.api_key,
            prompt=args.prompt,
            model=args.model,
            temperature=args.temperature
        )
        print(response_text)
    except Exception as exc:
        print(f"Error: {exc}")
        sys.exit(1)

if __name__ == "__main__":
    main()